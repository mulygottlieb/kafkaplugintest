/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMyModelArgs } from "./CreateMyModelArgs";
import { UpdateMyModelArgs } from "./UpdateMyModelArgs";
import { DeleteMyModelArgs } from "./DeleteMyModelArgs";
import { MyModelCountArgs } from "./MyModelCountArgs";
import { MyModelFindManyArgs } from "./MyModelFindManyArgs";
import { MyModelFindUniqueArgs } from "./MyModelFindUniqueArgs";
import { MyModel } from "./MyModel";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { MyModelService } from "../myModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MyModel)
export class MyModelResolverBase {
  constructor(
    protected readonly service: MyModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MyModel",
    action: "read",
    possession: "any",
  })
  async _myModelsMeta(
    @graphql.Args() args: MyModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MyModel])
  @nestAccessControl.UseRoles({
    resource: "MyModel",
    action: "read",
    possession: "any",
  })
  async myModels(
    @graphql.Args() args: MyModelFindManyArgs
  ): Promise<MyModel[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MyModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MyModel",
    action: "read",
    possession: "own",
  })
  async myModel(
    @graphql.Args() args: MyModelFindUniqueArgs
  ): Promise<MyModel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MyModel)
  @nestAccessControl.UseRoles({
    resource: "MyModel",
    action: "create",
    possession: "any",
  })
  async createMyModel(
    @graphql.Args() args: CreateMyModelArgs
  ): Promise<MyModel> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MyModel)
  @nestAccessControl.UseRoles({
    resource: "MyModel",
    action: "update",
    possession: "any",
  })
  async updateMyModel(
    @graphql.Args() args: UpdateMyModelArgs
  ): Promise<MyModel | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MyModel)
  @nestAccessControl.UseRoles({
    resource: "MyModel",
    action: "delete",
    possession: "any",
  })
  async deleteMyModel(
    @graphql.Args() args: DeleteMyModelArgs
  ): Promise<MyModel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "user" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: MyModel,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
